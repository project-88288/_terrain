import * as t from "@babel/types";
import { QueryMsg, ExecuteMsg } from "./types";
export declare const createWasmQueryMethod: (jsonschema: any, responses: string[]) => t.ClassProperty;
export declare const createQueryClass: (className: string, implementsClassName: string, queryMsg: QueryMsg, responses: string[]) => t.ExportNamedDeclaration;
export declare const createWasmExecMethod: (jsonschema: any) => t.ClassProperty;
export declare const createExecuteClass: (className: string, implementsClassName: string, extendsClassName: string, execMsg: ExecuteMsg) => t.ExportNamedDeclaration;
export declare const createExecuteInterface: (className: string, extendsClassName: string | null, execMsg: ExecuteMsg) => t.ExportNamedDeclaration;
export declare const createPropertyFunctionWithObjectParams: (methodName: string, responseType: string, jsonschema: any) => t.TSPropertySignature;
export declare const createPropertyFunctionWithObjectParamsForExec: (methodName: string, responseType: string, jsonschema: any) => t.TSPropertySignature;
export declare const createQueryInterface: (className: string, queryMsg: QueryMsg, responses: string[]) => t.ExportNamedDeclaration;
export declare const createTypeOrInterface: (Type: string, jsonschema: any) => t.ExportNamedDeclaration;
export declare const createTypeInterface: (jsonschema: any) => t.ExportNamedDeclaration;
